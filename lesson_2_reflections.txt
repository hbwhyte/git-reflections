What happens when you initialize a repository? Why do you need to do it?

    When you run "git init" you are able to create a git repository so in the
    future you can track changes for new or existing files in that directory

How is the staging area different from the working directory and the
repository? What value do you think it offers?

    The staging area is a middle ground which is good to separate out smaller
    actions, and to bundle changes, before permanently making them part of the
    git record by adding them to the commit log.

How can you use the staging area to make sure you have one commit per logical
change?

    By using the staging area, you can group changes to multiple files into one
    commit without having to commit changes to all files in the same repo. You
    can also double check the differences between the staging area and the most
    recent commit by running "git diff --staged".

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    Branches are useful if you have multiple versions, want to keep a
    production level of code working, or if you are testing something
    experimental. This way you can maintain something stable, and have
    multiple simultaneous versions available.

How do the diagrams help you visualize the branch structure?

    By visualizing the branch structure, I can understand better where the
    branches separate, which commits are shared, and where they differ.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    The result is that we can keep the additions and deletions from both
    branches in the final copy, even if they evolved independently. We
    represent it like that in the diagram because they were temporarily
    separated but came back together. They are listed in that order because
    of time stamps.
